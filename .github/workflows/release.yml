name: Release

on:
  push:
    branches:
      - main
    tags:
      - '*'

env:
  CLI_SCALA_VERSION: "3.3.4"
  CLI_SCALA_BINARY_VERSION: "3"
  GRAALVM_JAVA_VERSION: "11"
  GRAALVM_JAVA_DISTRIBUTION: "temurin"
  GRAALVM_BIN_DIR_NAME: "native-image"
  PROJECT_NAME: "maven2sbt"

jobs:
  gh-release:
    if: startsWith(github.ref, 'refs/tags/v')

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.GRAALVM_JAVA_VERSION }}
          distribution: ${{ env.GRAALVM_JAVA_DISTRIBUTION }}
          cache: sbt
      - uses: sbt/setup-sbt@v1

      - name: sbt GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_AUTH_TOKEN_GITHUB }}
        run: |
          echo "Run] sbt GitHub release"
          echo 'sbt -J-XX:MaxMetaspaceSize=1024m -J-Xmx2048m devOopsGitHubRelease'
          sbt \
            -J-Xmx2048m \
            -J-XX:MaxMetaspaceSize=1024m \
            devOopsGitHubRelease

  publish:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: gh-release

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.GRAALVM_JAVA_VERSION }}
          distribution: ${{ env.GRAALVM_JAVA_DISTRIBUTION }}
          cache: sbt
      - uses: sbt/setup-sbt@v1

      - uses: olafurpg/setup-gpg@v3

      - name: "sbt ci-release - ${{ github.run_number }}"
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          GITHUB_TOKEN: ${{ secrets.RELEASE_AUTH_TOKEN_GITHUB }}
        run: |
          echo "Run] sbt ci-release"
          export SOURCE_DATE_EPOCH=$(date +%s)
          echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH"
          echo 'sbt -J-XX:MaxMetaspaceSize=1024m -J-Xmx2048m -v clean +test +packagedArtifacts ci-release devOopsGitHubReleaseUploadArtifacts'
          sbt \
          -J-XX:MaxMetaspaceSize=1024m \
          -J-Xmx2048m \
          -v \
          clean \
          +test \
          +packagedArtifacts \
          ci-release


  packager-gh-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: gh-release

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.GRAALVM_JAVA_VERSION }}
          distribution: ${{ env.GRAALVM_JAVA_DISTRIBUTION }}
          cache: sbt
      - uses: sbt/setup-sbt@v1

      - name: "sbt GitHub Release and Publish tag for Scala ${{ env.CLI_SCALA_VERSION }} - ${{ github.run_number }}"
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_AUTH_TOKEN_GITHUB }}
        run: |
          echo "Run] sbt to publish artifacts to GitHub Release"
          export SOURCE_DATE_EPOCH=$(date +%s)
          echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH"
          echo 'sbt -J-XX:MaxMetaspaceSize=1024m -J-Xmx2048m ++${{ env.CLI_SCALA_VERSION }}! -v clean test universal:packageBin devOopsGitHubReleaseUploadArtifacts'
          sbt \
            -J-XX:MaxMetaspaceSize=1024m \
            -J-Xmx2048m \
            ++${{ env.CLI_SCALA_VERSION }}! \
            -v \
            clean \
            test \
            universal:packageBin \
            devOopsGitHubReleaseUploadArtifacts


  graalvm-gh-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: gh-release
    runs-on: ${{ matrix.os.value }}
    strategy:
      matrix:
        # https://github.com/actions/runner-images?tab=readme-ov-file#available-images
        os:
          - { name: "Ubuntu 22.04",           value: "ubuntu-22.04", bin-suffix: "-ubuntu" }
          - { name: "macOS 13",               value: "macos-13",     bin-suffix: "-macos-13" }
          - { name: "macOS 14 Apple Silicon", value: "macos-14",     bin-suffix: "-macos-14-arm64" }
          - { name: "macOS 15 Apple Silicon", value: "macos-15",     bin-suffix: "-macos-15-arm64" }
        run-binary: [maven2sbt-cli]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.GRAALVM_JAVA_VERSION }}
          distribution: ${{ env.GRAALVM_JAVA_DISTRIBUTION }}
          cache: sbt
      - uses: sbt/setup-sbt@v1

      - name: "GraalVM Build for Scala ${{ env.CLI_SCALA_VERSION }} - ${{ github.run_number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_AUTH_TOKEN_GITHUB }}
          CURRENT_BRANCH_NAME: ${{ github.ref }}
          RUN_ID: ${{ github.run_id }}
          RUN_NUMBER: ${{ github.run_number }}
          APP_BIN_NAME: ${{ matrix.run-binary }}${{ matrix.os.bin-suffix }}
        run: |
          sbt \
            -J-XX:MaxMetaspaceSize=1024m \
            -J-Xmx2048m \
            ++${{ env.CLI_SCALA_VERSION }}! \
            clean \
            test \
            nativeImage

          rm -f modules/${{ env.PROJECT_NAME }}-*/target/scala-*/*.jar

          ls -lGh modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/
          sh -c "modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/${{ matrix.run-binary }} --help"

          echo "mv modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/${{ matrix.run-binary }} modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/$APP_BIN_NAME"
          mv modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/${{ matrix.run-binary }} modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/$APP_BIN_NAME

          sbt \
            -J-XX:MaxMetaspaceSize=1024m \
            -J-Xmx2048m \
            devOopsGitHubReleaseUploadArtifacts

  graalvm-win-gh-release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: gh-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        run-binary: [maven2sbt-cli]
        run-binary-ext: [exe]
    steps:
      - name: Configure git
        run: "git config --global core.autocrlf false"
        shell: bash
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.GRAALVM_JAVA_VERSION }}
          distribution: ${{ env.GRAALVM_JAVA_DISTRIBUTION }}
          cache: sbt
      - uses: sbt/setup-sbt@v1
      - uses: ilammy/msvc-dev-cmd@v1

      - name: "GraalVM Build for Scala ${{ env.CLI_SCALA_VERSION }} - ${{ github.run_number }}"
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_AUTH_TOKEN_GITHUB }}
          CURRENT_BRANCH_NAME: ${{ github.ref }}
          RUN_ID: ${{ github.run_id }}
          RUN_NUMBER: ${{ github.run_number }}
        run: |
          sbt \
            -J-XX:MaxMetaspaceSize=1024m \
            -J-Xmx2048m \
            ++${{ env.CLI_SCALA_VERSION }}! \
            clean \
            test \
            nativeImage

          rm -f modules/${{ env.PROJECT_NAME }}-*/target/scala-*/*.jar

          ls -lGh modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/
          sh -c "modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/${{ matrix.run-binary }} --help"

          mv modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/${{ matrix.run-binary }}.${{ matrix.run-binary-ext }} modules/${{ env.PROJECT_NAME }}-cli/target/${{ env.GRAALVM_BIN_DIR_NAME }}/${{ matrix.run-binary }}-${{ matrix.os }}.${{ matrix.run-binary-ext }}

          sbt \
            -J-XX:MaxMetaspaceSize=1024m \
            -J-Xmx2048m \
            devOopsGitHubReleaseUploadArtifacts

  publish-snapshot:
    if: startsWith(github.ref, 'refs/heads/')

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: ${{ env.GRAALVM_JAVA_VERSION }}
          distribution: ${{ env.GRAALVM_JAVA_DISTRIBUTION }}
          cache: sbt
      - uses: sbt/setup-sbt@v1

      - uses: olafurpg/setup-gpg@v3

      - name: "sbt ci-release (no tag) - ${{ github.run_number }}"
        if: startsWith(github.ref, 'refs/heads/')
        env:
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
        run: |
          echo "Run] sbt ci-release SNAPSHOT"
          
          export JVM_OPTS="-Xss64m -Xms1024m -XX:MaxMetaspaceSize=2G -Xmx4G -XX:MaxInlineLevel=18 -XX:+UnlockExperimentalVMOptions -XX:+UseJVMCICompiler"
          echo "JVM_OPTS=$JVM_OPTS"
          echo "SBT_OPTS=${SBT_OPTS}"
          
          export SOURCE_DATE_EPOCH=$(date +%s)
          echo "SOURCE_DATE_EPOCH=$SOURCE_DATE_EPOCH"
          
          echo 'sbt -v clean +packagedArtifacts ci-release'
          sbt \
            -v \
            clean \
            +test \
            +packagedArtifacts \
            ci-release
