"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[387],{8977:(e,n,a)=>{a.r(n),a.d(n,{contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>t,toc:()=>r});var i=a(8168),s=(a(6540),a(5680));const o={id:"how-to-use",title:"Use maven2sbt CLI",sidebar_label:"How to Use"},l=void 0,t={unversionedId:"cli/how-to-use",id:"cli/how-to-use",isDocsHomePage:!1,title:"Use maven2sbt CLI",description:"How to Use CLI",source:"@site/docs/cli/how-to-use.md",sourceDirName:"cli",slug:"/cli/how-to-use",permalink:"/docs/cli/how-to-use",tags:[],version:"current",frontMatter:{id:"how-to-use",title:"Use maven2sbt CLI",sidebar_label:"How to Use"},sidebar:"docs",previous:{title:"Get CLI",permalink:"/docs/cli/get-cli"},next:{title:"Get Library",permalink:"/docs/library/get-library"}},r=[{value:"How to Use CLI",id:"how-to-use-cli",children:[]},{value:"Save as sbt Config File",id:"save-as-sbt-config-file",children:[]},{value:"Print Out",id:"print-out",children:[]}],p={toc:r},m="wrapper";function c(e){let{components:n,...a}=e;return(0,s.yg)(m,(0,i.A)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,s.yg)("h2",{id:"how-to-use-cli"},"How to Use CLI"),(0,s.yg)("p",null,"Now you can run it like"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-shell"},"$ maven2sbt --help \n\nUsage:\n  Maven2Sbt (file ARGS... | print ARGS...) [-v|--version VERSION] [-h|--help HELP]\n\nA tool to convert Maven pom.xml into sbt build.sbt\n\nAvailable options:\n  -v|--version VERSION    Prints the application version.\n  -h|--help HELP          Prints the synopsis and a list of options and arguments.\n\n\nAvailable commands:\n  file                    Convert pom.xml to sbt config and save in the file\n  print                   Convert pom.xml to sbt config and print it out\n\n")),(0,s.yg)("h2",{id:"save-as-sbt-config-file"},"Save as sbt Config File"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-shell"},'$ maven2sbt file --help\n\nUsage:\n  Maven2Sbt file -s|--scala-version <version> [-b|--scala-binary-version-name\n                 <scala-binary-version-name>] [--props-name <props-name>]\n                 [--libs-name <libs-name>] [-o|--out <file>] [--overwrite]\n                 <pom-path> [-h|--help HELP]\n\nConvert pom.xml to sbt config and save in the file\n\nAvailable options:\n  --overwrite             Overwrite if the output file already exists.\n  -s|--scala-version <version> Scala version\n  -b|--scala-binary-version-name <scala-binary-version-name> The name of Scala\n                          binary version property. This is useful to figure out\n                          if it is a Scala library or Java library\n                          e.g.)\n                          -b scala.binary\n                          # or\n                          --scala-binary-version-name scala.binary\n                          ---\n                          <properties>\n                            <scala.binary>2.13</scala.binary>\n                          </properties>\n                          <dependencies>\n                            <dependency>\n                              <groupId>io.kevinlee</groupId>\n                              <artifactId>myLib1_${scala.binary}</artifactId>\n                              <version>0.1.0</version>\n                            </dependency>\n                            <dependency>\n                              <groupId>io.kevinlee</groupId>\n                              <artifactId>myLib2</artifactId>\n                              <version>0.2.0</version>\n                            </dependency>\n                          </dependencies>\n                          ---\n                          results in\n                          "io.kevinlee" %% "myLib1" % "0.1.0"\n                          "io.kevinlee" % "myLib2" % "0.1.0"\n                          ---\n  --props-name <props-name> properties object name (e.g. \'props\' in `lazy val\n                          props = new {}`) (default: props)\n  --libs-name <libs-name> The name of the object containing all the libraries to\n                          re-use (e.g. \'libs\' in `lazy val libs = new {}`)\n                          (default: libs)\n  -o|--out <file>         output sbt config file (default: build.sbt)\n  -h|--help HELP          Prints the synopsis and a list of options and arguments.\n\nPositional arguments:\n  <pom-path>              Path to the pom file.\n\n')),(0,s.yg)("p",null,"e.g.)"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-shell"},"$ maven2sbt file --scala-version 2.13.4 --scala-binary-version-name scalaBinaryVersion pom.xml\n# or\n$ maven2sbt file -s 2.13.4 -b scalaBinaryVersion pom.xml\n")),(0,s.yg)("p",null,"or"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-shell"},"$ maven2sbt file --scala-version 2.13.4 --props-name myProps pom.xml\n# or\n$ maven2sbt file -s 2.13.4 --props-name myProps pom.xml\n")),(0,s.yg)("p",null,"It will generate ",(0,s.yg)("inlineCode",{parentName:"p"},"build.sbt"),"."),(0,s.yg)("p",null,"Save sbt config in a different file."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-shell"},"maven2sbt file --scala-version 2.13.4 --out something-else.sbt pom.xml\n# or\nmaven2sbt file -s 2.13.4 -o something-else.sbt pom.xml\n")),(0,s.yg)("p",null,"It will generate ",(0,s.yg)("inlineCode",{parentName:"p"},"something-else.sbt"),"."),(0,s.yg)("p",null,"I may faile if the output file already eixsts. If you want to overwrite, use the ",(0,s.yg)("inlineCode",{parentName:"p"},"--overwrite")," option."),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-shell"},"# build.sbt already exists and want to overwrite\nmaven2sbt file --scala-version 2.13.4 --overwrite pom.xml\n# or\nmaven2sbt file -s 2.13.4 --overwrite pom.xml\n\n# something-else.sbt already exists and want to overwrite\nmaven2sbt file --scala-version 2.13.4 --out something-else.sbt --overwrite pom.xml\n# or\nmaven2sbt file -s 2.13.4 -o something-else.sbt --overwrite pom.xml\n")),(0,s.yg)("h2",{id:"print-out"},"Print Out"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-shell"},'$ maven2sbt print --help\n\nUsage:\n  Maven2Sbt print -s|--scala-version <version> [-b|--scala-binary-version-name\n                  <scala-binary-version-name>] [--props-name <props-name>]\n                  [--libs-name <libs-name>] <pom-path> [-h|--help HELP]\n\nConvert pom.xml to sbt config and print it out\n\nAvailable options:\n  -s|--scala-version <version> Scala version\n  -b|--scala-binary-version-name <scala-binary-version-name> The name of Scala\n                          binary version property. This is useful to figure out\n                          if it is a Scala library or Java library\n                          e.g.)\n                          -b scala.binary\n                          # or\n                          --scala-binary-version-name scala.binary\n                          ---\n                          <properties>\n                            <scala.binary>2.13</scala.binary>\n                          </properties>\n                          <dependencies>\n                            <dependency>\n                              <groupId>io.kevinlee</groupId>\n                              <artifactId>myLib1_${scala.binary}</artifactId>\n                              <version>0.1.0</version>\n                            </dependency>\n                            <dependency>\n                              <groupId>io.kevinlee</groupId>\n                              <artifactId>myLib2</artifactId>\n                              <version>0.2.0</version>\n                            </dependency>\n                          </dependencies>\n                          ---\n                          results in\n                          "io.kevinlee" %% "myLib1" % "0.1.0"\n                          "io.kevinlee" % "myLib2" % "0.1.0"\n                          ---\n  --props-name <props-name> properties object name (e.g. \'props\' in `lazy val\n                          props = new {}`) (default: props)\n  --libs-name <libs-name> The name of the object containing all the libraries to\n                          re-use (e.g. \'libs\' in `lazy val libs = new {}`)\n                          (default: libs)\n  -h|--help HELP          Prints the synopsis and a list of options and arguments.\n\nPositional arguments:\n  <pom-path>              Path to the pom file.\n\n')),(0,s.yg)("p",null,"e.g.)"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-shell"},"$ maven2sbt print --scala-version 2.13.4 --scala-binary-version-name scalaBinaryVersion pom.xml\n# or\n$ maven2sbt print -s 2.13.4 -b scalaBinaryVersion pom.xml\n")),(0,s.yg)("p",null,"or"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre",className:"language-shell"},"$ maven2sbt print --scala-version 2.13.4 --props-name myProps pom.xml\n# or\n$ maven2sbt print -s 2.13.4 --props-name myProps pom.xml\n")),(0,s.yg)("p",null,"It will print out the content of ",(0,s.yg)("inlineCode",{parentName:"p"},"build.sbt")," generated from the given ",(0,s.yg)("inlineCode",{parentName:"p"},"pom.xml")))}c.isMDXComponent=!0}}]);